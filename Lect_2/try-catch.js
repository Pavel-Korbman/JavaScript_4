

// // Обработка ошибок

// // - Код с возможной ошибкой заворачиваем в блок try
// // - Обработку ошибки производим в блоке catch
// // - Блок finally выполнится при любом исходе

// // Есть нюансы использования:
// // ⚡ Переменные, объявленные в блоке try не будут видны в catch и finally. Поэтому, если
// // нужен обмен данными между ними, лучше объявить их на уровень выше.
// // ⚡ Код в блоке finally выполнится в любом случае, даже если в блоке try был оператор
// // return.

// try {
//     undefined = 0;
// } catch {
//     console.log('Что то произошло');
// } finally {
//     console.log('Отличный результат');
// }

// function divideNumber(a, b) {
//     try {
//         const result = a / b;
//         if (isNaN(result) /*|| result === Infinity*/) { // Проверяем является ли числом
//             throw new Error('Результат не является числом');
//         }
//         console.log(`${a}/${b} = ${result}`);
//     } catch (error) {
//         console.error('Ошибка деления:', error);
//     } finally {
//         console.log('Операция завершена');
//     }
// }

// divideNumber(40, 0); // 40/0 = Infinity
// // Операция завершена
// divideNumber(40, 10); // 40/10 = 4
// // Операция завершена
// divideNumber(40, 'n'); // Ошибка деления: Error: Результат не является числом
// // Операция завершена



