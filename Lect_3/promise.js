// –ü—Ä–æ–º–∏—Å
// ‚Äî —ç—Ç–æ –æ–±–µ—â–∞–Ω–∏–µ, —á—Ç–æ –º—ã —Å–µ–π—á–∞—Å –∑–∞–ø—É—Å—Ç–∏–º –æ–ø–µ—Ä–∞—Ü–∏—é, –∏ –æ–Ω–∞
// –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –∫–æ–≥–¥–∞-—Ç–æ –≤ –±—É–¥—É—â–µ–º

// let promise = new Promise(function(resolve, reject ){
//     // —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
// });

// –§—É–Ω–∫—Ü–∏—è, –ø–µ—Ä–µ–¥–∞–Ω–Ω–∞—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–æ–º–∏—Å–∞ ‚Äî —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å. –û–Ω–∞ —Å–∞–º–∞ –ø–æ —Å–µ–±–µ —è–≤–ª—è–µ—Ç—Å—è
// –∫–æ–ª–ª–±–µ–∫–æ–º –∏ –¥–æ–ª–∂–Ω–∞ –±—É–¥–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è, –∫–æ–≥–¥–∞ –ø—Ä–æ–º–∏—Å —Å–æ–∑–¥–∞—Å—Ç—Å—è. –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–ª–ª–±–µ–∫–∞ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ–º–∏—Å–∞ ‚Äî
// resolve –∏ reject ‚Äî —ç—Ç–æ —Ç–æ–∂–µ, –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å, –∫–æ–ª–ª–±–µ–∫–∏ –∏ –¥–æ–ª–∂–Ω—ã –±—É–¥—É—Ç –≤—ã–∑–≤–∞—Ç—å—Å—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∫–∞–∫–æ–≥–æ-
// —Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞
// üí° Resolve –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏. –†–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî value
// üí° Reject –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏. –†–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî error

// –°–≤–æ–π—Å—Ç–≤–∞ –ø—Ä–æ–º–∏—Å–∞
// –£ –æ–±—ä–µ–∫—Ç–∞ promise, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º new Promise, –µ—Å—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞:
// ‚ö° State (¬´—Å–æ—Å—Ç–æ—è–Ω–∏–µ¬ª) ‚Äî —Å–Ω–∞—á–∞–ª–∞ ¬´pending¬ª (¬´–æ–∂–∏–¥–∞–Ω–∏–µ¬ª), –ø–æ—Ç–æ–º –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ ¬´fulfilled¬ª
// –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ (–≤—ã–ø–æ–ª–Ω–∏–ª—Å—è resolve) –∏–ª–∏ –Ω–∞ ¬´rejected¬ª –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏
// –æ—à–∏–±–æ–∫ (–≤—ã–ø–æ–ª–Ω–∏–ª—Å—è reject)
// ‚ö° Result (¬´—Ä–µ–∑—É–ª—å—Ç–∞—Ç¬ª) ‚Äî –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–Ω —Ä–∞–≤–µ–Ω undefined, –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ value
// –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏, –ª–∏–±–æ –Ω–∞ error –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞
// –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–º–∏—Å–∞–º–∏ —á–∞—â–µ –≤—Å–µ–≥–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –º–µ—Ç–æ–¥ then

// promise.then(onfulfilled, onrejected);

// –ì–¥–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ onfulfilled –∏ onrejected –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ –≤—ã—Å—Ç—É–ø–∞—é—Ç –∫–æ–ª–ª–±–µ–∫–∏-
// –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏. –û–±–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏, –Ω–æ —á–∞—â–µ –≤—Å–µ–≥–æ then
// –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å –æ–¥–Ω–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º onfulfilled

// –ó–∞–¥–∞—á–∞ 1:
// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é generateRandomNumber(), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise, 
// –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π—Å—è —á–µ—Ä–µ–∑ 1 —Å–µ–∫ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10. –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–∏—Å–ª–∞ - Promise –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω—ë–Ω —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ.

let generateRandomNumber = () => {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            const randomNumber = Math.floor(Math.random() * 10) + 1;
            if (randomNumber) {
                resolve(randomNumber);
            } else {
                reject('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞');
            }
        }, 1000)
    });
};

// –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø—Ä–æ–º–∏—Å–æ–º:

generateRandomNumber()
    .then((number) => {
        console.log('–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ:', number);
    })
    .catch((error) => {
        console.log('–û—à–∏–±–∫–∞:', error);
    });

// –ó–∞–¥–∞—á–∞ 2:
// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é fetchData(url) , –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise , –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞–Ω–Ω–æ–º—É URL. –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω Promise –¥–æ–ª–∂–µ–Ω —Ä–µ–∑–æ–ª–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ - Promise –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω—ë–Ω —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ.

let fetchData = (url) => {
    return new Promise((resolve, reject) => {
        fetch(url)
            .then((response) => response.json())
            .then((data) => resolve(data))
            .catch((error) => reject('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö'))
    });

}

// https://api.github.com/users/1

fetchData('https://api.github.com/users/1')
    .then((data) => {
        console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ', data);
    })
    .catch((error) => {
        console.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ', error);
    });

// –ó–∞–¥–∞—á–∞ 3:
// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é checkFileExists(file) , –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π—Å—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫. Promise –¥–æ–ª–∂–µ–Ω —Ä–µ–∑–æ–ª–≤–∏—Ç—å—Å—è –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å—Å—è –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç.

let checkIfFileExists = (file) => {

};

let checkFileExists = (file) => {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            const fileExist = checkIfFileExists(file);
            if (fileExist) {
                resolve('–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
            } else {
                reject('—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            }
        }, 2000);
    });
}

checkFileExists('file_1.txt')
    .then((message) => {
        console.log(message);
    })
    .catch((error) => {
        console.log('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
    })

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ .then –±–µ–∑ .catch

// –ó–∞–¥–∞—á–∞ 4:
// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é calculateSumm(a, b) , –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise. Promise –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω —Å—É–º–º–æ–π –¥–≤—É—Ö —á–∏—Å–µ–ª.

const calculateSumm = (a, b) => {
    return new Promise((resolve, reject) => {
        resolve(a + b);
    });
}

calculateSumm(300, 4).then((res) => {
    console.log('–°—É–º–º–∞ = ', res); // –°—É–º–º–∞ =  304
})

calculateSumm('some', 4).then((res) => {
    console.log('–°—É–º–º–∞ = ', res); // –°—É–º–º–∞ =  some4
})

// –ó–∞–¥–∞—á–∞ 5:
// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é divideNumbers(a, b) , –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise. Promise –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–µ. –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ 0 - Promise –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω—ë–Ω —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–æ–ª—å.

const divideNumbers = (a, b) => {
    return new Promise((resolve, reject) => {
        (b !== 0) ? resolve(a / b) : reject('–ù–µ –≤–æ–∑–º–æ–∂–Ω–æ –¥–µ–ª–∏—Ç—å –Ω–∞ 0');
    }
    );
}

divideNumbers(400, 3)
    .then((result) => {
        console.log('–ß–∞—Å—Ç–Ω–æ–µ = ', result); // –ß–∞—Å—Ç–Ω–æ–µ =  133.33333333333334
    })
    .catch((error) => {
        console.log('–û—à–∏–±–∫–∞: ', error);
    })

divideNumbers(400, 0)
    .then((result) => {
        console.log('–ß–∞—Å—Ç–Ω–æ–µ = ', result); // –û—à–∏–±–∫–∞:  –ù–µ –≤–æ–∑–º–æ–∂–Ω–æ –¥–µ–ª–∏—Ç—å –Ω–∞ 0
    })
    .catch((error) => {
        console.log('–û—à–∏–±–∫–∞: ', error);
    })

// –¶–ï–ü–û–ß–ö–ò –ü–†–û–ú–ò–°–û–í:

new Promise(function (resolve) {
    setTimeout(() => resolve(1), 1000);
}).then(function (result) {
    console.log(result);
    return new Promise((resolve) => {
        setTimeout(() => resolve(result * 2), 1000);
    });
}).then(function (result) {
    console.log(result);
    return new Promise((resolve) => {
        setTimeout(() => resolve(result * 2), 1000);
    });
}).then(function (result) {
    console.log(result);
})
// –ó–¥–µ—Å—å –º—ã —Ç—Ä–∏ —Ä–∞–∑–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ —Å–µ–∫—É–Ω–¥—É –ø–æ–ª—É—á–∏–º —Ç—Ä–∏ –æ—Ç–≤–µ—Ç–∞. –ü–µ—Ä–≤—ã–π –ø—Ä–æ–º–∏—Å
// —á–µ—Ä–µ–∑ —Ç–∞–π–º–∞—É—Ç –≤ 1 —Å–µ–∫—É–Ω–¥—É –≤—ã–¥–∞—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç 1 —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ resolve(1), –≤—Ç–æ—Ä–æ–π
// –ø—Ä–æ–º–∏—Å —É–º–Ω–æ–∂–∏—Ç –µ–≥–æ –Ω–∞ 2, —Ç—Ä–µ—Ç–∏–π –ø—Ä–æ–º–∏—Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–º–∏—Å–∞
// —É–º–Ω–æ–∂–∏—Ç –Ω–∞ 2.
// 1
// 2
// 4


// Finally

let processData = (data) => {

};

let performOperation = (data) => {
    return new Promise((resolve, reject) => {
        let result = processData(data);
        (result) ? resolve(result) : reject('–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏');
    }).finally(() => {
        console.log('–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    });
}

performOperation('example')
    .then((result)=>{
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏: ', result);
    })
    .catch((error)=>{
        console.log('–û—à–∏–±–∫–∞: ', error);
    })


//     –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å—Å–∏–≤–æ–º –ø—Ä–æ–º–∏—Å–æ–≤
// Promise.all()
// üí° –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ (–∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç) –ø—Ä–æ–º–∏—Å–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
// –Ω–æ–≤—ã–π –ø—Ä–æ–º–∏—Å
// üí° –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–∏—Å—ã –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ø–æ –ø–æ—Ä—è–¥–∫—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
// –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±—É–¥–µ—Ç –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–º–∏—Å–∞
// üí° –ï—Å–ª–∏ –≤ –∫–∞–∫–æ–º-—Ç–æ –ø—Ä–æ–º–∏—Å–µ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –æ—à–∏–±–∫–∞, —Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±—É–¥–µ—Ç —ç—Ç–∞
// –æ—à–∏–±–∫–∞, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è

