// Array.from 
// Метод from класса Array позволяет создавать массивы из итерируемых объектов.

let pseudo = {
    0: 'first',
    1: 'second',
    2: 'three',
    length: 3
}

let arr = Array.from(pseudo);

console.log(arr); // (3) ['first', 'second', 'three']
console.log(arr.pop()); // three
console.log(arr); // (2) ['first', 'second']

let pseudo2 = 'Это строка';
let arr1 = Array.from(pseudo2);
console.log(arr1); // (10) ['Э', 'т', 'о', ' ', 'с', 'т', 'р', 'о', 'к', 'а']

// Мар 
// 
// Мар – это коллекция ключ/значение, как объект. 
// В отличие от объектов, Мар позволяет использовать ключи любого типа. Set – это «множество» значений (без ключей), где каждое значение может появляться только один раз.

// ● newMap()—создаёт коллекцию 
// ● map.set(key, value) — записывает по ключу key значение value 
// ● map.get(key) —возвращает значение по ключу или undefined, если ключ key отсутствует 
// ● map.has(key) —возвращает true, если ключ key присутствует в коллекции, иначе false 
// ● map.delete(key) — удаляет элемент (пару «ключ/значение») по ключу key 
// ● map.clear() — очищает коллекцию от всех элементов 
// ● map.size — возвращает текущее количество элементов


let map = new Map();

map.set('1', 'str1');
map.set(1, 'num1');
map.set(true, 'bool1');

console.log(map); // Map(3) {'1' => 'str1', 1 => 'num1', true => 'bool1'}
console.log(map.get('1')); // str1
console.log(map.get(1)); // num1
console.log(map.get(true)); // bool1
console.log(map.size); // 3

let map1 = new Map();

map1.set('1', 'str10')
    .set(1, 'num10')
    .set(true, 'bool10');

console.log(map1); // Map(3) {'1' => 'str10', 1 => 'num10', true => 'bool10'}

// Перебор коллекции Map 
// В коллекцию map перебор происходит в том же порядке, в котором добавлялись элементы. 
// Для перебора коллекции Map есть 4метода: 
// ● map.keys() —возвращает итерируемый объект по ключам 
// ● map.values() —возвращает итерируемый объект по значениям 
// ● map.entries() — возвращает итерируемый объект по парам вида[ключ, значение], этот вариант используется по умолчанию в for(..of..) 
// ● map.forEach() — итератор, работающий так же, как и с массивом

let veg = new Map([
    ['огурец', 500], 
    ['помидор', 350], 
    ['лук', 50]
]);
console.log(veg); // Map(3) {'огурец' => 500, 'помидор' => 350, 'лук' => 50}

for (let good of veg.keys()) {
    console.log(good); 
}
// огурец
// помидор
// лук

for (let good of veg.values()) {
    console.log(good); 
}
// 500
// 350
// 50

for (let good of veg) {
    console.log(good); 
}
// (2) ['огурец', 500]
// (2) ['помидор', 350]
// (2) ['лук', 50]

veg.forEach((val, key, map)=>{
    console.log(`${key}: ${val}`);
});
// огурец: 500
// помидор: 350
// лук: 50

// Работа с объектами 
// Мы можем создавать коллекции Map из объектов и, наоборот, объекты из Map. 
// Object.entries поможет создать Map из объекта:

const person = {
    firstName: 'Pavel',
    secondName: 'Korbman'
};
console.log(person); // {firstName: 'Pavel', secondName: 'Korbman'}
let map2 = new Map(Object.entries(person));
console.log(map2); // Map(2) {'firstName' => 'Pavel', 'secondName' => 'Korbman'}

let personObj = Object.fromEntries(map2);
console.log(personObj); // {firstName: 'Pavel', secondName: 'Korbman'}

// Set 
//
// Set — это особый вид коллекции: «множество» значений (без ключей), где каждое значение может появляться только один раз. 
// Его основные методы это: 
// ● newSet(iterable) — создаёт Set, и если в качестве аргумента был предоставлен итерируемый объект (обычно это массив), то копирует его значения в новый Set 
// ● set.add(value) — добавляет значение (если оно уже есть, то ничего не делает), возвращает тот же объект set 
// ● set.delete(value) — удаляет значение, возвращает true, если value было во множестве на момент вызова, иначе false 
// ● set.has(value) — возвращает true, если значение присутствует во множестве, иначе false 
// ● set.clear() — удаляет все имеющиеся значения 
// ● set.size —возвращает количество элементов во множестве

const animals = [
'Жучка',
'Тузик',
'Бобик',
'Шарик',
'Жучка',
'Тузик',
'Бобик',
'Шарик'
];

const uniqAnimals = new Set(animals);

console.log(uniqAnimals); // Set(4) {'Жучка', 'Тузик', 'Бобик', 'Шарик'}

// Обратно в массив Array.from()
console.log(Array.from(uniqAnimals)); // (4) ['Жучка', 'Тузик', 'Бобик', 'Шарик']



// WeakMap и WeakSet

// WeakMap — это Map-подобная коллекция, позволяющая использовать в качестве ключей только объекты, и автоматически удаляющая их вместе с соответствующими значениями, как только они становятся недостижимыми иными путями. 
// WeakSet — это Set-подобная коллекция, которая хранит только объекты и удаляет их, как только они становятся недостижимыми иными путями. 
// Обе этих структуры данных не поддерживают методы и свойства, работающие со всем содержимым сразу или возвращающие информацию о размере коллекции. 
// Возможны только операции на отдельном элементе коллекции. 
// WeakMap и WeakSet используются как вспомогательные структуры данных в дополнение к «основному» месту хранения объекта. Если объект удаляется из основного хранилища и нигде не используется, кроме как в качестве ключа в WeakMap или в WeakSet,то он будет удалён автоматически.
