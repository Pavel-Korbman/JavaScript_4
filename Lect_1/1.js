// –°–±–æ—Ä—â–∏–∫ –º—É—Å–æ—Ä–∞ 
// ‚Äì —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å, –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ–º –Ω–µ–Ω—É–∂–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏. 


let obj = {
    animal: 'Dog'
};

let obj2 = obj;
obj = null;

console.log(obj2);
console.log(obj);

// –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö Symbol 

// –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–∑ —Å–µ–±—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä. –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ, –¥–∞–∂–µ —É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã—Ö —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–¥–Ω–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª –æ–¥–∏–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –µ–≥–æ –Ω—É–∂–Ω–æ –æ–±—ä—è–≤–∏—Ç—å –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ä–µ–µ—Å—Ç—Ä–µ. –ü–æ–ª—è –æ–±—ä–µ–∫—Ç–∞ —Å –∫–ª—é—á–∞–º–∏, —Ç–∏–ø –∫–æ—Ç–æ—Ä—ã—Ö Symbol, —Å–∫—Ä—ã—Ç—ã –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.

// –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã 
// –ò–º–µ—é—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–º–∏ –º—ã –º–æ–∂–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤. –û–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ JavaScript –∏ –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏.

// –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∏—Ö: 
// üìå Symbol.hasInstance 
// üìå Symbol.isConcatSpreadable 
// üìå Symbol.iterator 
// üìå Symbol.toPrimitive

let symbol = Symbol(); // –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
symbol = Symbol('dog');
console.log(symbol); // Symbol(dog)

// –ü—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∏–º–≤–æ–ª–∞, –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ, –¥–∞–∂–µ –µ—Å–ª–∏ –º—ã —Å–æ–∑–¥–∞–¥–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º:
const dog1ID = Symbol('dog');
const dog2ID = Symbol('dog');

console.log(dog1ID == dog2ID); // false

// –ó–Ω–∞—á–µ–Ω–∏—è –Ω–µ –≤—ã–≤–æ–¥—è—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –∫–æ–Ω—Å–æ–ª–∏
// alert(dog1ID); // Uncaught TypeError:
// alert(dog1ID.toString); // function toString() { [native code] }

// description

// –ï—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º –≤—ã–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞, –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–≤–æ–π—Å—Ç–≤—É description
const dogID = Symbol('my super dog');
console.log(dogID.description); // my super dog
// alert(dogID.description); // my super dog

// –°–∏–º–≤–æ–ª—ã –≤ –æ–±—ä–µ–∫—Ç–µ

let id = Symbol('idDog');

let buddy = {
    [id]: '–ñ—É—á–∫–∞'
}

console.log(buddy); // {Symbol(idDog): '–ñ—É—á–∫–∞'}
console.log(buddy[id]); // –ñ—É—á–∫–∞

buddy[id] = '–ë–æ–±–∏–∫';
console.log(buddy[id]); // –ë–æ–±–∏–∫

// –ï—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã –≤ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞—Ö - —Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –∫–æ–¥ –º–æ–∂–µ—Ç –∏—Ö –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å.

let buddies = {
    [Symbol('–ñ—É—á–∫–∞')]: '–ñ—É—á–∫–∞',
    [Symbol('–ë–æ–±–∏–∫')]: '–ë–æ–±–∏–∫',
    [Symbol('–ë–æ–±–∏–∫')]: '–ë–æ–±–∏–∫',
    [Symbol('–®–∞—Ä–∏–∫')]: '–®–∞—Ä–∏–∫',
    elephant: '–°–ª–æ–Ω'
}
console.log(buddies); // {elephant: '–°–ª–æ–Ω', Symbol(–ñ—É—á–∫–∞): '–ñ—É—á–∫–∞', Symbol(–ë–æ–±–∏–∫): '–ë–æ–±–∏–∫', Symbol(–ë–æ–±–∏–∫): '–ë–æ–±–∏–∫', Symbol(–®–∞—Ä–∏–∫): '–®–∞—Ä–∏–∫'}

// Object.assign –∫–æ–ø–∏—Ä—É–µ—Ç –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞, –≤ —Ç–æ–º —á–∏—Å–ª–µ, —Å–∏–º–≤–æ–ª—å–Ω—ã–µ –≤ –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç

let newBuddies = {};

Object.assign(newBuddies, buddies);
console.log(newBuddies); // {elephant: '–°–ª–æ–Ω', Symbol(–ñ—É—á–∫–∞): '–ñ—É—á–∫–∞', Symbol(–ë–æ–±–∏–∫): '–ë–æ–±–∏–∫', Symbol(–ë–æ–±–∏–∫): '–ë–æ–±–∏–∫', Symbol(–®–∞—Ä–∏–∫): '–®–∞—Ä–∏–∫'}

buddies.cat = '–ë–∞—Ä—Å–∏–∫';
console.log(buddies); // –ë–∞—Ä—Å–∏–∫ –ø–æ—è–≤–∏—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª–∏ –ø—Ä–∏ –ø–µ—á–∞—Ç–∏ –∏–∑ 72 –∏ 82 —Å—Ç—Ä–æ–∫–∏ –∏ –Ω–µ –ø–æ—è–≤–∏—Ç—å—Å—è –≤ console.log(newBuddies) –≤ 79 —Å—Ç—Ä–æ–∫–µ

//  Symbol.for

// –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–∏ Symbol() –ø—Ä–∏–≤–æ–¥—è—Ç –∫ —Å–æ–∑–¥–∞–Ω–∏—é —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤—Å–µ–≥–¥–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –º—ã –ø–µ—Ä–µ–¥–∞—ë–º –≤ –Ω–µ—ë –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –æ–ø–∏—Å–∞–Ω–∏–µ. 
// –ê —á—Ç–æ, –µ—Å–ª–∏ –Ω–∞–º –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–∏ –∑–∞–¥–∞—á–µ –∫–∞–∂–¥–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä? 
// –î–ª—è —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä —Å–∏–º–≤–æ–ª–æ–≤. –ú—ã —Å–æ–∑–¥–∞—ë–º —Å–∏–º–≤–æ–ª—ã –≤ –Ω—ë–º, –ø–æ—Ç–æ–º –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–µ–º—É –ø–æ —ç—Ç–æ–º—É –∏–º–µ–Ω–∏. –ò –ø—Ä–∏ —ç—Ç–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞–º –±—É–¥–µ—Ç –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤—ã–¥–∞–≤–∞—Ç—å—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç—Ç–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é, —Å–∏–º–≤–æ–ª. 
// –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ 
// Symbol.for(–∫–ª—é—á). 
// –û–Ω —Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω—É–∂–Ω—ã–π —Å–∏–º–≤–æ–ª, –∞, –ø—Ä–∏ –µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏, —Å–æ–∑–¥–∞—Å—Ç.

let id1 = Symbol.for("id"); // –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª–∞ –Ω–µ—Ç - –æ–Ω –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω

let idAgain = Symbol.for("id"); // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤ –¥—Ä—É–≥—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

console.log(id1 === idAgain); // true

// Symbol.keyFor (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä), 
// –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É. 
// –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, –∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–∏—Å–∫–∞ –æ–±—ã—á–Ω—ã—Ö –≤–µ—Ä–Ω—ë—Ç undefined.

let sym1 = Symbol.for("name");
let sym2 = Symbol.for("uniqId");

console.log(Symbol.keyFor(sym1)); // name
console.log(Symbol.keyFor(sym2)); // uniqId

// –ò—Ç–µ—Ä–∏—Ä—É–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã 
// 
// –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º—ã–µ –∏–ª–∏ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã ‚Äî —ç—Ç–æ –æ–±–æ–±—â–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤. 
// –ö–æ–Ω—Ü–µ–ø—Ü–∏—è, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –ª—é–±–æ–π –æ–±—ä–µ–∫—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Ü–∏–∫–ª–µ for(‚Ä¶of‚Ä¶). 
// –ï—Å—Ç—å –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–º–∏. 
// –ù–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç—Ä–æ–∫–∏. 
// –ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–æ —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–º —Ç–∏–ø–æ–º –¥–∞–Ω–Ω—ã—Ö –≤ JavaScript, –º—ã –º–æ–∂–µ–º –µ—ë –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤:

const string = 'Hello!';

console.log(string[1]); // e
console.log(string.length); // 6

for (let str of string) {
    console.log(str);
}

// Symbol.iterator 
// –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —è–∑—ã–∫–∞ 

// Symbol.iterator –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–º—É –Ω–∞–º–∏ –∫–æ–ª–ª–±–µ–∫—É.

// –û–±—ä–µ–∫—Ç —è–≤–ª—è–µ—Ç—Å—è –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–º, –µ—Å–ª–∏ –æ–Ω —É–º–µ–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ –æ–¥–Ω–æ–º—É –∑–∞ —Ä–∞–∑, –ø—Ä–∏ —ç—Ç–æ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—è —Å–≤–æ—ë —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. 
// –í JavaScript –∏—Ç–µ—Ä–∞—Ç–æ—Ä ‚Äî —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥ next(), –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. 
// –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –¥–≤—É–º—è —Å–≤–æ–π—Å—Ç–≤–∞–º–∏: 
// done –∏ value. 
// –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º, –Ω–æ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π –∫–∞–∫–∏—Ö-—Ç–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Ç–æ –æ–Ω –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ü–∏–∫–ª–∞ for(‚Ä¶ of ‚Ä¶). –ù–∞–ø—Ä–∏–º–µ—Ä, —É –Ω–∞—Å –µ—Å—Ç—å –æ–±—ä–µ–∫—Ç —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º —á–∏—Å–µ–ª:

let range = {
    from: 1,
    to: 10
};

// –ú—ã —Ö–æ—Ç–∏–º –∏–∑ –Ω–µ–≥–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —á—Ç–æ–±—ã –Ω–∞ –≤—ã—Ö–æ–¥–µ —Ü–∏–∫–ª–∞ for(let number of range) –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç 1 –¥–æ 10. 
// –ß—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ–±—ä–µ–∫—Ç Symbol.iterator

range[Symbol.iterator] = function () {
    return {
        current: this.from,
        last: this.to,
        next() {
            return this.current <= this.last ? { done: false, value: this.current++ } : { done: true };
        }
    }
}

for (let number of range) {
    console.log(number);
}

// –ú–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤—Å—ë –≤–Ω—É—Ç—Ä–∏ –æ–±—ä–µ–∫—Ç–∞:

let range1 = {
    from: 1,
    to: 12,
    [Symbol.iterator]() {
        this.current = this.from;
        return this;
    },
    next() {
        return this.current <= this.to ? { done: false, value: this.current++ } : { done: true };
    }

};

for (let number of range1) {
    console.log(number);
}

// Array.from 
// –ú–µ—Ç–æ–¥ from –∫–ª–∞—Å—Å–∞ Array –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–∞—Å—Å–∏–≤—ã –∏–∑ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.

let pseudo = {
    0: 'first',
    1: 'second',
    2: 'three',
    length: 3
}

let arr = Array.from(pseudo);

console.log(arr); // (3)¬†['first', 'second', 'three']
console.log(arr.pop()); // three
console.log(arr); // (2)¬†['first', 'second']

let pseudo2 = '–≠—Ç–æ —Å—Ç—Ä–æ–∫–∞';
let arr1 = Array.from(pseudo2);
console.log(arr1); // (10)¬†['–≠', '—Ç', '–æ', ' ', '—Å', '—Ç', '—Ä', '–æ', '–∫', '–∞']





